diff -r 879227d29941 src/ex_cmds.h
--- a/src/ex_cmds.h	Sun Aug 03 09:29:55 2014 +0100
+++ b/src/ex_cmds.h	Sun Aug 03 11:31:10 2014 +0100
@@ -120,7 +120,9 @@
 EX(CMD_argglobal,	"argglobal",	ex_args,
 			BANG|FILES|EDITCMD|ARGOPT|TRLBAR),
 EX(CMD_arglocal,	"arglocal",	ex_args,
-			BANG|FILES|EDITCMD|ARGOPT|TRLBAR),
+			BANG|RANGE|NOTADR|ZEROR|COUNT|FILES|EDITCMD|ARGOPT|TRLBAR),
+EX(CMD_arglists,	"arglists",	ex_arglists,
+			BANG|TRLBAR|ARGOPT|CMDWIN),
 EX(CMD_argument,	"argument",	ex_argument,
 			BANG|RANGE|NOTADR|COUNT|EXTRA|EDITCMD|ARGOPT|TRLBAR),
 EX(CMD_ascii,		"ascii",	do_ascii,
diff -r 879227d29941 src/ex_cmds2.c
--- a/src/ex_cmds2.c	Sun Aug 03 09:29:55 2014 +0100
+++ b/src/ex_cmds2.c	Sun Aug 03 11:31:10 2014 +0100
@@ -2160,6 +2160,36 @@
     else if (eap->cmdidx == CMD_arglocal)
     {
 	garray_T	*gap = &curwin->w_alist->al_ga;
+	int		b_flag = 0;
+	tabpage_T	*tp;
+	win_T		*wp;
+
+	/*
+	 * ":Nargslocal": use arglist with ID eap->line2 if it is given.
+	 */
+	if (eap->addr_count > 0) {
+	    if ((int)eap->line2 == 0) {
+		alist_unlink(ALIST(curwin));
+		ALIST(curwin) = &global_alist;
+		return;
+	    }
+	    else
+	    {
+		FOR_ALL_TAB_WINDOWS(tp, wp) {
+		    if (wp->w_alist->id == (int)eap->line2) {
+			b_flag = 1;
+			goto foundwalist;
+		    }
+		}
+foundwalist:
+		if (b_flag == 1) {
+		    alist_unlink(ALIST(curwin));
+		    curwin->w_alist = wp->w_alist;
+		    ++curwin->w_alist->al_refcount;
+		}
+		return;
+	    }
+	}
 
 	/*
 	 * ":argslocal": make a local copy of the global argument list.
@@ -2179,6 +2209,79 @@
 }
 
 /*
+ * ":arglists"
+ */
+    void
+ex_arglists(eap)
+    exarg_T	*eap;
+{
+
+    tabpage_T	*tp;
+    win_T	*wp;
+    buf_T	*buf;
+    int		len;
+    int		tp_idx = 0;
+    int		w_idx = 0;
+
+    if (eap->forceit)
+    {
+	msg_outtrans_attr("  ID tab win  bufname", hl_attr(HLF_T));
+	out_flush();
+	for (tp = first_tabpage; tp != NULL; tp = tp->tp_next) {
+	    tp_idx++;
+	    w_idx = 0;
+	    for (wp = (tp == curtab)
+		    ? firstwin : tp->tp_firstwin; wp; wp = wp->w_next) {
+		w_idx++;
+		msg_putchar('\n');
+
+		buf = wp->w_buffer;
+		if (buf_spname(buf) != NULL)
+		    vim_strncpy(NameBuff, buf_spname(buf), MAXPATHL - 1);
+		else
+		    home_replace(wp->w_buffer, buf->b_fname, NameBuff, MAXPATHL, TRUE);
+
+		len = vim_snprintf((char *)IObuff, IOSIZE, "%c%3d %3d %3d  \"%s\"\0",
+			curwin == wp ? '>' :
+			    (tp == curtab && wp == prevwin ? '<' : ' '),
+			wp->w_alist->id,
+			tp_idx,
+			w_idx,
+			NameBuff);
+		msg_outtrans(IObuff);
+		out_flush();
+		ui_breakcheck();
+	    }
+	}
+    }
+    else
+    {
+	msg_outtrans_attr("  ID win  bufname", hl_attr(HLF_T));
+	out_flush();
+	for (wp = firstwin; wp; wp = wp->w_next) {
+	    w_idx++;
+	    msg_putchar('\n');
+
+	    buf = wp->w_buffer;
+	    if (buf_spname(buf) != NULL)
+		vim_strncpy(NameBuff, buf_spname(buf), MAXPATHL - 1);
+	    else
+		home_replace(wp->w_buffer, buf->b_fname, NameBuff, MAXPATHL, TRUE);
+
+	    len = vim_snprintf((char *)IObuff, IOSIZE, "%c%3d %3d  \"%s\"\0",
+		    curwin == wp ? '>' :
+			(wp == prevwin ? '<' : ' '),
+		    wp->w_alist->id,
+		    w_idx,
+		    NameBuff);
+	    msg_outtrans(IObuff);
+	    out_flush();
+	    ui_breakcheck();
+	}
+    }
+}
+
+/*
  * ":previous", ":sprevious", ":Next" and ":sNext".
  */
     void
diff -r 879227d29941 src/ex_docmd.c
--- a/src/ex_docmd.c	Sun Aug 03 09:29:55 2014 +0100
+++ b/src/ex_docmd.c	Sun Aug 03 11:31:10 2014 +0100
@@ -200,6 +200,9 @@
 # define ex_argadd		ex_ni
 # define ex_argdelete		ex_ni
 # define ex_listdo		ex_ni
+# define ex_arglists		ex_ni
+#else
+static void	ex_arglists __ARGS((exarg_T *eap));
 #endif
 static void	ex_mode __ARGS((exarg_T *eap));
 static void	ex_wrongmodifier __ARGS((exarg_T *eap));
